{"version":3,"sources":["../src/server.js"],"names":["http","url","bodyParser","DataService","express","require","cors","mongoose","app","whiteList","corsOptions","origin","callback","undefined","indexOf","Error","use","json","connect","useMongoClient","db","connection","get","request","response","get_params","parse","query","Object","keys","length","setHeader","getProjects","err","projects","console","log","writeHead","end","JSON","stringify","queryByArgs","getProject","params","id","project","CastError","put","createProject","body","projectId","ValidationError","delete","deleteProject","result","post","hasOwnProperty","updateProject","createServer","listen"],"mappings":"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","file":"server.js","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\nimport * as http from 'http';\r\nimport * as url from 'url';\r\nimport * as bodyParser from 'body-parser';\r\nimport * as DataService from \"./control/project.data.service\";\r\nimport { Project } from './models/project';\r\n\r\nconst app = express();\r\n\r\n//CORS Setup\r\nlet whiteList = []; //add domains\r\nlet corsOptions = {\r\n    origin: function (origin, callback) {\r\n        if (origin === undefined || whiteList.indexOf(origin) !== -1) {\r\n            callback(null, true)\r\n        } else {\r\n            callback(new Error('Not allowed by CORS'))\r\n        }\r\n    }\r\n}\r\n\r\n// // configure app to use bodyParser()\r\n// // this will let us get the data from a POST\r\n// // app.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\n\r\n\r\nmongoose.connect('mongodb://localhost/NodeJS-REST-API-demo', { useMongoClient: true });\r\nvar db = mongoose.connection;\r\n\r\n\r\napp.get('/projects', cors(corsOptions), (request, response) => {\r\n    var get_params = url.parse(request.url, true).query;\r\n    if (Object.keys(get_params).length === 0) {\r\n        response.setHeader('content-type', 'application/json');\r\n        DataService.getProjects((err, projects) => {\r\n            if (err) {\r\n                console.log(err);\r\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                response.end('Internal server error');\r\n                return;\r\n            } else {\r\n                if (!projects || projects.length === 0) {\r\n                    if (response != null) {\r\n                        response.writeHead(404, { 'Content-Type': 'text/plain' });\r\n                        response.end('Not Found');\r\n                    }\r\n                    return;\r\n                }\r\n                if (response != null) {\r\n                    response.end(JSON.stringify(projects));\r\n                } \r\n            }\r\n        });\r\n    } else {\r\n        response.setHeader('content-type', 'application/json');\r\n        DataService.queryByArgs(get_params, (err, projects) => {\r\n            if (err) {\r\n                console.log(err);\r\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                response.end('Internal server error');\r\n                return;\r\n            } else {\r\n                if (!projects || projects.length === 0) {\r\n                    if (response != null) {\r\n                        response.writeHead(404, { 'Content-Type': 'text/plain' });\r\n                        response.end('Not Found');\r\n                    }\r\n                    return;\r\n                }\r\n                if (response != null) {\r\n                    response.end(JSON.stringify(projects));\r\n                }                \r\n            }\r\n        });\r\n    }\r\n});\r\n\r\napp.get('/projects/:id', cors(corsOptions), (request, response) => {\r\n    response.setHeader('content-type', 'application/json');\r\n    DataService.getProject(request.params.id, (err, project) => {\r\n        if (err) {\r\n            console.log(err);\r\n            if(err instanceof mongoose.Error.CastError){\r\n                if (response != null) {\r\n                    response.writeHead(404, { 'Content-Type': 'text/plain' });\r\n                    response.end('Not Found');\r\n                }\r\n                return;\r\n            } else {\r\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                response.end('Internal server error');\r\n                return;\r\n            }            \r\n        } else {\r\n            if (!project) {\r\n                if (response != null) {\r\n                    response.writeHead(404, { 'Content-Type': 'text/plain' });\r\n                    response.end('Not Found');\r\n                }\r\n                return;\r\n            }\r\n            if (response != null) {\r\n                response.end(JSON.stringify(project));\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\napp.put('/projects/', cors(corsOptions), (request, response) => {\r\n    response.setHeader('content-type', 'application/json');\r\n    DataService.createProject(request.body, (err, projectId) => {\r\n        if (err) {\r\n            console.log(err);\r\n            if(err instanceof mongoose.Error.ValidationError){\r\n                if (response != null) {\r\n                    response.writeHead(400, { 'Content-Type': 'text/plain' });\r\n                    response.end('Bad request');\r\n                }\r\n                return;\r\n            } else {\r\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                response.end('Internal server error');\r\n                return;\r\n            } \r\n        } else if (projectId) {\r\n            response.writeHead(201);\r\n            response.end(JSON.stringify(projectId));\r\n        }\r\n    });\r\n\r\n});\r\n\r\napp.delete('/projects/:id', cors(corsOptions), (request, response) => {\r\n    response.setHeader('content-type', 'application/json');\r\n    DataService.deleteProject(request.params.id, (err, result) => {\r\n        if (err) {\r\n            console.log(err);\r\n            if(err instanceof mongoose.Error.CastError){\r\n                if (response != null) {\r\n                    response.writeHead(404, { 'Content-Type': 'text/plain' });\r\n                    response.end('Not Found');\r\n                }\r\n                return;\r\n            } else {\r\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                response.end('Internal server error');\r\n                return;\r\n            }\r\n        } else if (result) {\r\n            response.end(JSON.stringify(result));\r\n        }\r\n    });\r\n});\r\n\r\napp.post('/projects', cors(corsOptions), (request, response) => {\r\n    response.setHeader('content-type', 'application/json');    \r\n    if (!request.body.hasOwnProperty('_id')) {\r\n        response.writeHead(400, { 'Content-Type': 'text/plain' });\r\n        response.end('Bad request');\r\n    } else {\r\n        DataService.updateProject(request.body, (err, result) => {\r\n            if (err) {\r\n                console.log(err);\r\n                if(err instanceof mongoose.Error.ValidationError){\r\n                    if (response != null) {\r\n                        response.writeHead(400, { 'Content-Type': 'text/plain' });\r\n                        response.end('Bad request');\r\n                    }\r\n                    return;\r\n                } else {\r\n                    response.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                    response.end('Internal server error');\r\n                    return;\r\n                }\r\n            } else if (result) {\r\n                response.end(JSON.stringify(result));\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nhttp.createServer(app).listen(3000, function () {\r\n    console.log('Server listening on port 3000');\r\n});"]}