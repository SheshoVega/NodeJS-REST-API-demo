{"version":3,"sources":["../src/server.js"],"names":["http","url","bodyParser","DataService","express","require","cors","mongoose","app","whiteList","corsOptions","origin","callback","undefined","indexOf","Error","use","json","connect","db","connection","get","request","response","get_params","parse","query","Object","keys","length","setHeader","getProjects","err","projects","console","log","writeHead","end","JSON","stringify","queryByArgs","getProject","params","id","project","CastError","options","put","createProject","body","projectId","ValidationError","delete","deleteProject","result","post","hasOwnProperty","updateProject","createServer","listen"],"mappings":"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","file":"server.js","sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\nimport * as http from 'http';\nimport * as url from 'url';\nimport * as bodyParser from 'body-parser';\nimport * as DataService from \"./control/project.data.service\";\nimport { Project } from './models/project';\n\nconst app = express();\n\n//CORS Setup\nlet whiteList = [\n    'http://localhost:4200' //angular app\n]; //add domains\nlet corsOptions = {\n    origin: function (origin, callback) {\n        if (origin === undefined || whiteList.indexOf(origin) !== -1) {\n            callback(null, true)\n        } else {\n            callback(new Error('Not allowed by CORS'))\n        }\n    }\n}\n\n// // configure app to use bodyParser()\n// // this will let us get the data from a POST\n// // app.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n\nmongoose.connect('mongodb://localhost/NodeJS-REST-API-demo');\nvar db = mongoose.connection;\n\n\napp.get('/projects', cors(corsOptions), (request, response) => {\n    var get_params = url.parse(request.url, true).query;\n    if (Object.keys(get_params).length === 0) {\n        response.setHeader('content-type', 'application/json');\n        DataService.getProjects((err, projects) => {\n            if (err) {\n                console.log(err);\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\n                response.end('Internal server error');\n                return;\n            } else {\n                if (!projects || projects.length === 0) {\n                    if (response != null) {\n                        response.writeHead(404, { 'Content-Type': 'text/plain' });\n                        response.end('Not Found');\n                    }\n                    return;\n                }\n                if (response != null) {\n                    response.end(JSON.stringify(projects));\n                } \n            }\n        });\n    } else {\n        response.setHeader('content-type', 'application/json');\n        DataService.queryByArgs(get_params, (err, projects) => {\n            if (err) {\n                console.log(err);\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\n                response.end('Internal server error');\n                return;\n            } else {\n                if (!projects || projects.length === 0) {\n                    if (response != null) {\n                        response.writeHead(404, { 'Content-Type': 'text/plain' });\n                        response.end('Not Found');\n                    }\n                    return;\n                }\n                if (response != null) {\n                    response.end(JSON.stringify(projects));\n                }                \n            }\n        });\n    }\n});\n\napp.get('/projects/:id', cors(corsOptions), (request, response) => {\n    response.setHeader('content-type', 'application/json');\n    DataService.getProject(request.params.id, (err, project) => {\n        if (err) {\n            console.log(err);\n            if(err instanceof mongoose.Error.CastError){\n                if (response != null) {\n                    response.writeHead(404, { 'Content-Type': 'text/plain' });\n                    response.end('Not Found');\n                }\n                return;\n            } else {\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\n                response.end('Internal server error');\n                return;\n            }            \n        } else {\n            if (!project) {\n                if (response != null) {\n                    response.writeHead(404, { 'Content-Type': 'text/plain' });\n                    response.end('Not Found');\n                }\n                return;\n            }\n            if (response != null) {\n                response.end(JSON.stringify(project));\n            }\n        }\n    });\n});\n\napp.options('/projects/', cors(corsOptions));\napp.put('/projects/', cors(corsOptions), (request, response) => {\n    response.setHeader('content-type', 'application/json');\n    DataService.createProject(request.body, (err, projectId) => {\n        if (err) {\n            console.log(err);\n            if(err instanceof mongoose.Error.ValidationError){\n                if (response != null) {\n                    response.writeHead(400, { 'Content-Type': 'text/plain' });\n                    response.end('Bad request');\n                }\n                return;\n            } else {\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\n                response.end('Internal server error');\n                return;\n            } \n        } else if (projectId) {\n            response.writeHead(201);\n            response.end(JSON.stringify(projectId));\n        }\n    });\n\n});\n\napp.options('/projects/:id', cors(corsOptions));\napp.delete('/projects/:id', cors(corsOptions), (request, response) => {\n    response.setHeader('content-type', 'application/json');\n    DataService.deleteProject(request.params.id, (err, result) => {\n        if (err) {\n            console.log(err);\n            if(err instanceof mongoose.Error.CastError){\n                if (response != null) {\n                    response.writeHead(404, { 'Content-Type': 'text/plain' });\n                    response.end('Not Found');\n                }\n                return;\n            } else {\n                response.writeHead(500, { 'Content-Type': 'text/plain' });\n                response.end('Internal server error');\n                return;\n            }\n        } else if (result) {\n            response.end(JSON.stringify(result));\n        }\n    });\n});\n\napp.post('/projects', cors(corsOptions), (request, response) => {\n    response.setHeader('content-type', 'application/json');    \n    if (!request.body.hasOwnProperty('_id')) {\n        response.writeHead(400, { 'Content-Type': 'text/plain' });\n        response.end('Bad request');\n    } else {\n        DataService.updateProject(request.body, (err, result) => {\n            if (err) {\n                console.log(err);\n                if(err instanceof mongoose.Error.ValidationError){\n                    if (response != null) {\n                        response.writeHead(400, { 'Content-Type': 'text/plain' });\n                        response.end('Bad request');\n                    }\n                    return;\n                } else {\n                    response.writeHead(500, { 'Content-Type': 'text/plain' });\n                    response.end('Internal server error');\n                    return;\n                }\n            } else if (result) {\n                response.end(JSON.stringify(result));\n            }\n        });\n    }\n});\n\nhttp.createServer(app).listen(3000, function () {\n    console.log('Server listening on port 3000');\n});"]}