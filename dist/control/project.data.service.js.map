{"version":3,"sources":["../../src/control/project.data.service.js"],"names":["getProjects","callback","find","getProject","id","findOne","_id","queryByArgs","params","Object","keys","length","query","$or","key","obj","push","toProject","body","title","type","tecnologies","state","product","createProject","project","create","deleteProject","deleteOne","updateProject","findOneAndUpdate","new","runValidators"],"mappings":";;;;;;;AAAA;;;;AAEA,SAASA,WAAT,CAAqBC,QAArB,EAA+B;AAC3B,qBAAQC,IAAR,CAAaD,QAAb;AACH;;AAED,SAASE,UAAT,CAAoBC,EAApB,EAAwBH,QAAxB,EAAkC;AAC9B,qBAAQI,OAAR,CAAgB,EAAEC,KAAKF,EAAP,EAAhB,EAA6BH,QAA7B;AACH;;AAED,SAASM,WAAT,CAAqBC,MAArB,EAA6BP,QAA7B,EAAuC;;AAEnC,QAAIQ,OAAOC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,KAA+B,CAAnC,EAAsC;AAClC,yBAAQT,IAAR,CAAaM,MAAb,EAAqBP,QAArB;AACH,KAFD,MAEO;AACH,YAAIW,QAAQ,EAAEC,KAAK,EAAP,EAAZ;AACA,aAAK,IAAMC,GAAX,IAAkBN,MAAlB,EAA0B;AACtB,gBAAIO,0BAASD,GAAT,EAAeN,OAAOM,GAAP,CAAf,CAAJ;AACAF,kBAAMC,GAAN,CAAUG,IAAV,CAAeD,GAAf;AACH;AACD,yBAAQb,IAAR,CAAaU,KAAb,EAAoBX,QAApB;AACH;AAEJ;;AAED,SAASgB,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,WAAO;AACHZ,aAAKY,KAAKZ,GADP;AAEHa,eAAOD,KAAKC,KAFT;AAGHC,cAAMF,KAAKE,IAHR;AAIHC,qBAAaH,KAAKG,WAJf;AAKHC,eAAOJ,KAAKI,KALT;AAMHC,iBAASL,KAAKK;AANX,KAAP;AAQH;;AAED,SAASC,aAAT,CAAuBN,IAAvB,EAA6BjB,QAA7B,EAAuC;AACnC,QAAIwB,UAAU,yBAAWP,IAAX,CAAd;AACA,qBAAQQ,MAAR,CAAeD,OAAf,EAAwBxB,QAAxB;AACH;;AAED,SAAS0B,aAAT,CAAuBvB,EAAvB,EAA2BH,QAA3B,EAAqC;AACjC,qBAAQ2B,SAAR,CAAkB,EAAEtB,KAAKF,EAAP,EAAlB,EAA+BH,QAA/B;AACH;;AAED,SAAS4B,aAAT,CAAuBX,IAAvB,EAA6BjB,QAA7B,EAAuC;AACnC,QAAIwB,UAAUR,UAAUC,IAAV,CAAd;AACA,qBAAQY,gBAAR,CACI,EAAExB,KAAKmB,QAAQnB,GAAf,EADJ,EAEI;AACIa,eAAOM,QAAQN,KADnB;AAEIC,cAAMK,QAAQL,IAFlB;AAGIC,qBAAaI,QAAQJ,WAHzB;AAIIC,eAAOG,QAAQH,KAJnB;AAKIC,iBAASE,QAAQF;AALrB,KAFJ,EASI,EAAEQ,KAAK,IAAP,EAAaC,eAAe,IAA5B,EATJ,EAUI/B,QAVJ;AAYH;;QAEQD,W,GAAAA,W;QAAaG,U,GAAAA,U;QAAYI,W,GAAAA,W;QAAaiB,a,GAAAA,a;QAAeG,a,GAAAA,a;QAAeE,a,GAAAA,a","file":"project.data.service.js","sourcesContent":["import { Project, newProject } from \"../models/project\";\r\n\r\nfunction getProjects(callback) {\r\n    Project.find(callback);\r\n};\r\n\r\nfunction getProject(id, callback) {\r\n    Project.findOne({ _id: id }, callback);\r\n};\r\n\r\nfunction queryByArgs(params, callback) {\r\n\r\n    if (Object.keys(params).length === 1) {\r\n        Project.find(params, callback);\r\n    } else {\r\n        let query = { $or: [] };\r\n        for (const key in params) {\r\n            let obj = { [key]: params[key] };\r\n            query.$or.push(obj);\r\n        }\r\n        Project.find(query, callback);\r\n    }\r\n\r\n};\r\n\r\nfunction toProject(body) {\r\n    return {\r\n        _id: body._id,\r\n        title: body.title,\r\n        type: body.type,\r\n        tecnologies: body.tecnologies,\r\n        state: body.state,\r\n        product: body.product\r\n    };\r\n}\r\n\r\nfunction createProject(body, callback) {\r\n    let project = newProject(body);\r\n    Project.create(project, callback);\r\n}\r\n\r\nfunction deleteProject(id, callback) {\r\n    Project.deleteOne({ _id: id }, callback);\r\n}\r\n\r\nfunction updateProject(body, callback) {\r\n    let project = toProject(body);\r\n    Project.findOneAndUpdate(\r\n        { _id: project._id },\r\n        {\r\n            title: project.title, \r\n            type: project.type,\r\n            tecnologies: project.tecnologies,\r\n            state: project.state,\r\n            product: project.product\r\n        }, \r\n        { new: true, runValidators: true }, \r\n        callback\r\n    );\r\n}\r\n\r\nexport { getProjects, getProject, queryByArgs, createProject, deleteProject, updateProject };"]}